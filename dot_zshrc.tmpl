# Personal Zsh configuration file. It is strongly recommended to keep all
# shell customization and configuration (including exported environment
# variables such as PATH) in this file or in files sourced from it.
#
# Documentation: https://github.com/romkatv/zsh4humans/blob/v5/README.md.

# Periodic auto-update on Zsh startup: 'ask' or 'no'.
# You can manually run `z4h update` to update everything.
zstyle ':z4h:' auto-update      'no'
# Ask whether to auto-update this often; has no effect if auto-update is 'no'.
zstyle ':z4h:' auto-update-days '28'

# Keyboard type: 'mac' or 'pc'.
zstyle ':z4h:bindkey' keyboard  'mac'

# Don't start tmux.
zstyle ':z4h:' start-tmux       no

# Mark up shell's output with semantic information.
zstyle ':z4h:' term-shell-integration 'yes'

# Right-arrow key accepts one character ('partial-accept') from
# command autosuggestions or the whole thing ('accept')?
zstyle ':z4h:autosuggestions' forward-char 'accept'

# Recursively traverse directories when TAB-completing files.
zstyle ':z4h:fzf-complete' recurse-dirs 'no'

# Enable direnv to automatically source .envrc files.
zstyle ':z4h:direnv'         enable 'no'
# Show "loading" and "unloading" notifications from direnv.
zstyle ':z4h:direnv:success' notify 'yes'

# Enable ('yes') or disable ('no') automatic teleportation of z4h over
# SSH when connecting to these hosts.
zstyle ':z4h:ssh:example-hostname1'   enable 'yes'
zstyle ':z4h:ssh:*.example-hostname2' enable 'no'
# The default value if none of the overrides above match the hostname.
zstyle ':z4h:ssh:*'                   enable 'no'

# Send these files over to the remote host when connecting over SSH to the
# enabled hosts.
zstyle ':z4h:ssh:*' send-extra-files '~/.nanorc' '~/.env.zsh'

# Install or update core components (fzf, zsh-autosuggestions, etc.) and
# initialize Zsh. After this point console I/O is unavailable until Zsh
# is fully initialized. Everything that requires user interaction or can
# perform network I/O must be done above. Everything else is best done below.
z4h init || return

# Extend PATH.
path=(~/bin $path)

# Export environment variables.
export GPG_TTY=$TTY
export VISUAL='nvim'
export EDITOR="$VISUAL"

{{- if eq .chezmoi.hostname "rBook-Pro" }}
eval "$(~/.local/bin/mise activate zsh)"
# pnpm
export PNPM_HOME="/Users/shraymonks/Library/pnpm"
export PATH="$PNPM_HOME:$PATH"
# pnpm endexport GPG_TTY=$(tty)
#
{{- end}}

{{- if eq .chezmoi.hostname "raymonds-Apple-MacBook-Pro" }}
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
export PATH="/Users/raymond/.local/bin:$PATH"
eval "$(pyenv init --path)"
eval "$(pyenv init -)"

export DEVELOPER_NAME=Shraymonks
export PANTS_LINT=true
export REMOTE_PRIVATE_KEY_FILE="/Users/raymond/.ssh/id_ed25519"
{{- end}}

# Source additional local files if they exist.
z4h source ~/.env.zsh

# Define key bindings.
z4h bindkey undo Ctrl+/   Shift+Tab  # undo the last command line change
z4h bindkey redo Option+/            # redo the last undone command line change

z4h bindkey z4h-cd-back    Shift+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward Shift+Right  # cd into the next directory
z4h bindkey z4h-cd-up      Shift+Up     # cd into the parent directory
z4h bindkey z4h-cd-down    Shift+Down   # cd into a child directory

# Autoload functions.
autoload -Uz zmv

# Define functions and completions.
function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md

function jj_status() {
  emulate -L zsh
  cd "$1"


  local grey='%244F'
  local green='%2F'
  local blue='%39F'
  local red='%196F'
  local yellow='%3F'
  local cyan='%6F'
  local magenta='%5F'


  ## jj_add
  jj --at-operation=@ debug snapshot


  ## jj_at
  local branch=$(jj --ignore-working-copy --at-op=@ --no-pager log --no-graph --limit 1 -r "
    coalesce(
      heads(::@ & (bookmarks() | remote_bookmarks() | tags())),
      heads(@:: & (bookmarks() | remote_bookmarks() | tags())),
      trunk()
    )" -T "separate(' ', bookmarks, tags)" 2> /dev/null | cut -d ' ' -f 1)
  if [[ -n $branch ]]; then
    [[ $branch =~ "\*$" ]] && branch=${branch::-1}


    local VCS_STATUS_COMMITS_AFTER=$(jj --ignore-working-copy --at-op=@ --no-pager log --no-graph -r "$branch..@ & (~empty() | merges())" -T '"n"' 2> /dev/null | wc -c | tr -d ' ')
    local VCS_STATUS_COMMITS_BEFORE=$(jj --ignore-working-copy --at-op=@ --no-pager log --no-graph -r "@..$branch & (~empty() | merges())" -T '"n"' 2> /dev/null | wc -c | tr -d ' ')
    local counts=($(jj --ignore-working-copy --at-op=@ --no-pager bookmark list -r $branch -T '
      if(remote,
        separate(" ",
          name ++ "@" ++ remote, 
          coalesce(tracking_ahead_count.exact(), tracking_ahead_count.lower()),
          coalesce(tracking_behind_count.exact(), tracking_behind_count.lower()),
          if(tracking_ahead_count.exact(), "0", "+"),
          if(tracking_behind_count.exact(), "0", "+"),
        ) ++ "\n"
      )
    '))


    local VCS_STATUS_LOCAL_BRANCH=$branch
    local VCS_STATUS_COMMITS_AHEAD=$counts[2]
    local VCS_STATUS_COMMITS_BEHIND=$counts[3]
    local VCS_STATUS_COMMITS_AHEAD_PLUS=$counts[4]
    local VCS_STATUS_COMMITS_BEHIND_PLUS=$counts[5]
  fi


  local status_color=${green}
  (( VCS_STATUS_COMMITS_AHEAD )) && status_color=${cyan}
  (( VCS_STATUS_COMMITS_BEHIND )) && status_color=${magenta}
  (( VCS_STATUS_COMMITS_AHEAD && VCS_STATUS_COMMITS_BEHIND )) && status_color=${red}


  local res
  local where=${(V)VCS_STATUS_LOCAL_BRANCH}
  # If local branch name or tag is at most 32 characters long, show it in full.
  # Otherwise show the first 12 â€¦ the last 12.
  (( $#where > 32 )) && where[13,-13]="â€¦"
  res+="${status_color}${where//\%/%%}"  # escape %


  # â€¹42 if before the local bookmark
  (( VCS_STATUS_COMMITS_BEFORE )) && res+="â€¹${VCS_STATUS_COMMITS_BEFORE}"
  # â€º42 if beyond the local bookmark
  (( VCS_STATUS_COMMITS_AFTER )) && res+="â€º${VCS_STATUS_COMMITS_AFTER}"



  ## jj_remote
  # â‡£42 if behind the remote.
  (( VCS_STATUS_COMMITS_BEHIND )) && res+=" ${green}â‡£${VCS_STATUS_COMMITS_BEHIND}"
  (( VCS_STATUS_COMMITS_BEHIND_PLUS )) && res+="${VCS_STATUS_COMMITS_BEHIND_PLUS}"
  # â‡¡42 if ahead of the remote; no leading space if also behind the remote: â‡£42â‡¡42.
  (( VCS_STATUS_COMMITS_AHEAD && !VCS_STATUS_COMMITS_BEHIND )) && res+=" "
  (( VCS_STATUS_COMMITS_AHEAD  )) && res+="${green}â‡¡${VCS_STATUS_COMMITS_AHEAD}"
  (( VCS_STATUS_COMMITS_AHEAD_PLUS )) && res+="${VCS_STATUS_COMMITS_AHEAD_PLUS}"



  ## jj_change
  IFS="#" local change=($(jj --ignore-working-copy --at-op=@ --no-pager log --no-graph --limit 1 -r "@" -T '
    separate("#", change_id.shortest(4).prefix(), coalesce(change_id.shortest(4).rest(), "\0"),
      commit_id.shortest(4).prefix(),
      coalesce(commit_id.shortest(4).rest(), "\0"),
      concat(
        if(conflict, "ðŸ’¥"),
        if(divergent, "ðŸš§"),
        if(hidden, "ðŸ‘»"),
        if(immutable, "ðŸ”’"),
      ),
    )'))
  local VCS_STATUS_CHANGE=($change[1] $change[2])
  local VCS_STATUS_COMMIT=($change[3] $change[4])
  local VCS_STATUS_ACTION=$change[5]
  # 'zyxw' with the standard jj color coding for shortest name
  res+=" ${magenta}${VCS_STATUS_CHANGE[1]}${grey}${VCS_STATUS_CHANGE[2]}"
  # 'ðŸ’¥ðŸš§ðŸ‘»ðŸ”’' if the repo is in an unusual state.
  [[ -n $VCS_STATUS_ACTION     ]] && res+=" ${red}${VCS_STATUS_ACTION}"
  # # '123abc' with the standard jj color coding for shortest name
  # res+=" ${blue}${VCS_STATUS_COMMIT[1]}${grey}${VCS_STATUS_COMMIT[2]}"




  ## jj_desc
  local VCS_STATUS_MESSAGE=$(jj --ignore-working-copy --at-op=@ --no-pager log --no-graph --limit 1 -r "@" -T "coalesce(description.first_line(), if(!empty, '\Uf040 '))")
  [[ -n $VCS_STATUS_MESSAGE ]] && res+=" ${green}${VCS_STATUS_MESSAGE}"
  


  ## jj_status
  local VCS_STATUS_CHANGES=($(jj log --ignore-working-copy --at-op=@ --no-graph --no-pager -r @ -T "diff.summary()" 2> /dev/null | awk 'BEGIN {a=0;d=0;m=0} /^A / {a++} /^D / {d++} /^M / {m++} /^R / {m++} /^C / {a++} END {print(a,d,m)}'))
  (( VCS_STATUS_CHANGES[1] )) && res+=" %F{green}+${VCS_STATUS_CHANGES[1]}"
  (( VCS_STATUS_CHANGES[2] )) && res+=" %F{red}-${VCS_STATUS_CHANGES[2]}"
  (( VCS_STATUS_CHANGES[3] )) && res+=" ${yellow}^${VCS_STATUS_CHANGES[3]}"




  ## jj_op
  # local VCS_STATUS_MESSAGE=$(jj --ignore-working-copy --at-op=@ --no-pager op log --limit 1 --no-graph -T "id.short()")
  # [[ -n $VCS_STATUS_MESSAGE ]] && res+=" ${blue}${VCS_STATUS_MESSAGE}"




  # return results
  echo $res
}
function jj_status_callback() {
  emulate -L zsh
  if [[ $2 -ne 0 ]]; then
    typeset -g p10k_jj_status=
  else
    typeset -g p10k_jj_status="$3"
  fi
  typeset -g p10k_jj_status_stale= p10k_jj_status_updated=1
  p10k display -r
}
async_start_worker        jj_status_worker -u
async_unregister_callback jj_status_worker
async_register_callback   jj_status_worker jj_status_callback
function prompt_jj() {
  emulate -L zsh -o extended_glob
  (( $+commands[jj]         )) || return
  [[ -n ./(../)#(.jj)(#qN/) ]] || return
  typeset -g p10k_jj_status_stale=1 p10k_jj_status_updated=
  p10k segment -f grey -c '$p10k_jj_status_stale' -e -t '$p10k_jj_status'
  p10k segment -c '$p10k_jj_status_updated' -e -t '$p10k_jj_status'
  async_job jj_status_worker jj_status $PWD
}

# Define named directories: ~w <=> Windows home directory on WSL.
[[ -z $z4h_win_home ]] || hash -d w=$z4h_win_home

# Define aliases.
alias tree='tree -a -I .git'

# Add flags to existing aliases.
alias ls="${aliases[ls]:-ls} -A"

# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt glob_dots     # no special treatment for file names with a leading dot
setopt no_auto_menu  # require an extra TAB press to open the completion menu
